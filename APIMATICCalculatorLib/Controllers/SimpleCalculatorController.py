# -*- coding: utf-8 -*-

"""
   APIMATICCalculatorLib.Controllers.SimpleCalculatorController

   This file was automatically generated by APIMATIC BETA v2.0 on 06/28/2016
"""
import unirest

from APIMATICCalculatorLib.APIHelper import APIHelper
from APIMATICCalculatorLib.Configuration import Configuration
from APIMATICCalculatorLib.APIException import APIException


class SimpleCalculatorController(object):


    """A Controller to access Endpoints in the APIMATICCalculatorLib API."""

    def get_calculate(self,
                      options=dict()):
        """Does a GET request to /{operation}.

        Calculates the expression using the specified operation.

        Args:
            options (dict, optional): Key-value pairs for any of the
                parameters to this API Endpoint. All parameters to the
                endpoint are supplied through the dictionary with their names
                being the key and their desired values being the value. A list
                of parameters that can be used are::

                    operation -- OperationTypeEnum -- The operator to apply on
                        the variables
                    x -- double -- The LHS value
                    y -- double -- The RHS value

        Returns:
            double: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        # The base uri for api requests
        query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        query_builder += "/{operation}"

        # Process optional template parameters
        query_builder = APIHelper.append_url_with_template_parameters(query_builder, { 
            "operation":  options.get('operation', None).to_string() if options.get('operation', None) is not None else None
        })

        # Process optional query parameters
        query_parameters = {
            "x": options.get('x', None),
            "y": options.get('y', None)
        }
        query_builder = APIHelper.append_url_with_query_parameters(query_builder, query_parameters)

        # Validate and preprocess url
        query_url = APIHelper.clean_url(query_builder)

        # Prepare headers
        headers = {

            "user-agent": "APIMATIC 2.0",

        }

        # Prepare and invoke the API call request to fetch the response
        response = unirest.get(query_url, headers=headers)

        # Error handling using HTTP status codes
        if response.code < 200 or response.code > 206:  # 200 = HTTP OK
            raise APIException("HTTP Response Not OK", response.code, response.body) 
    
        return response.body
